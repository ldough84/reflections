When would you want to use a remote repository rather than keeping all your work local?

    For working on a joint project with someone else.  Even if you're right next to one another, it's more convenient to keep track of the code by contributing to the same repository rather than emailing the files back and forth or some other solution.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If Git stayed up to date with your remote repository it could expose code that is not ready to be shown to the public, or even within your team or company.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    You would use a branch to experiment with different versions of your code, a clone to copy a remote repository to local, and a fork to copy someone else's project for which you do not have edit permissions.

What is the benefit of having a copy of the last known state of the remote
stored locally?

	You can always compare to understand changes that you've made since the last pull

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

	You could just email code back and forth.  The barrier to entry would be next to nothing, but you would lose all the rich tools for comparision and history logging that Git offers.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Making a different branch in order to make changes allows you to experiment more freely and widely, including more substantive changes without fearing that you will disrupt your production code.  That means that merges may be more painful as you have to reconcile basic parts of your code with the changes.  Always editing new commmits on master allows you to make small, incremental improvements more easily.